import heapq

def find_path(grid, start, end):
    heap = [(0, start, [start])]
    seen = set()
    
    while heap:
        _, (x,y), path = heapq.heappop(heap)
        if (x,y) == end:
            return path
        
        if (x,y) in seen:
            continue
        seen.add((x,y))
        
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            nx, ny = x+dx, y+dy
            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0:
                heapq.heappush(heap, (abs(nx-end[0])+abs(ny-end[1]), (nx,ny), path + [(nx,ny)]))
    
    return None

# Example usage
grid = [
    [0, 0, 0, 0],
    [0, 1, 1, 0],
    [0, 0, 0, 0],
    [0, 1, 0, 0]
]

path = find_path(grid, (0,0), (3,3))
print("Path:" if path else "No path", *path if path else "")