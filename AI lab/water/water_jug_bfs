from collections import deque

def water_jug_bfs(capacity_a, capacity_b, target):
    queue = deque([(0, 0, [])])
    visited = set()
    
    while queue:
        a, b, path = queue.popleft()
        
        if (a, b) in visited:
            continue
        visited.add((a, b))
        
        if a == target or b == target:
            return path + [(a, b)]
        
        # Generate all possible next states
        next_states = [
            (capacity_a, b, "Fill Jug A"),
            (a, capacity_b, "Fill Jug B"),
            (0, b, "Empty Jug A"),
            (a, 0, "Empty Jug B"),
            (max(0, a - (capacity_b - b)), min(capacity_b, b + a), "Pour A to B"),
            (min(capacity_a, a + b), max(0, b - (capacity_a - a)), "Pour B to A")
        ]
        
        for state in next_states:
            new_a, new_b, action = state
            if (new_a, new_b) not in visited:
                queue.append((new_a, new_b, path + [(a, b, action)]))
    
    return None

# Example usage
if __name__ == "__main__":
    solution = water_jug_bfs(4, 3, 2)
    if solution:
        print("BFS Solution Path:")
        for step in solution:
            print(step)
    else:
        print("No solution found")